{"version":3,"sources":["mnf/frontend/site.cljs"],"mappings":"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","names":["js/mnf","js/mnf.frontend","js/mnf.frontend.site","js/mnf.frontend.site.root-atom","mnf.frontend.site/root-atom","cljs.core.atom","mnf.frontend.site/app-state","reagent.core.atom","mnf.frontend.site/nav-state","mnf.frontend.site/load-edn-file","file-path","callback","js/console.log","js/fetch","response","js/Error","text","cljs.core.subs","G__12015","cljs.reader.read_string","error","js/console.error","mnf.frontend.site/load-data!","cljs.core.println","p1__12016#","cljs.core.swap_BANG_","cljs.core/assoc","p1__12017#","mnf.frontend.site/format-value","v","js/Date","mnf.frontend.site/sort-by-key","data","key-name","ascending?","comparator","cljs.core/compare","cljs.core.comp","cljs.core/-","p1__12018#","cljs.core.sort_by","cljs.core.get","mnf.frontend.site/data-table","state","and__5000__auto__","cljs.core/seq","cljs.core.doall","iter__5480__auto__","s__12020","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__12022","cljs.core/chunk-buffer","i__12021","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12019","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","header","cljs.core/keys","s","cljs.core._EQ_","cljs.core.update","cljs.core/not","cljs.core/deref","cljs.core/name","sorted-data","s__12024","b__12026","i__12025","iter__12023","row","cljs.core/hash","s__12028","b__12030","i__12029","iter__12027","s__12032","b__12034","i__12033","iter__12031","mnf.frontend.site/team-sheet","mnf.frontend.site/match-data","mnf.frontend.site/player-data","mnf.frontend.site/team-builder","mnf.frontend.site/nav-link","id","label","active-tab","mnf.frontend.site/navigation","menu-open?","cljs.core/update","mnf.frontend.site/main-content","G__12035","mnf.frontend.site/app","mnf.frontend.site/init!","cljs.core/reset!","reagent.dom.client/create-root","js/document","reagent.dom.client.render","js/mnf.frontend.site.start","mnf.frontend.site/start","cljs.core/chunk-first"],"sourcesContent":["(ns mnf.frontend.site\n  (:require [reagent.core :as r]\n            [reagent.dom.client :as rdom]\n            [cljs.reader :as reader]))\n\n;; State\n(defonce root-atom (atom nil))\n\n(def app-state\n  (r/atom {:active-tab \"team-sheet\"\n           :match-data nil\n           :player-data nil}))\n\n(def nav-state (r/atom {:menu-open? false}))\n\n;; Data Loading\n(defn load-edn-file [file-path callback]\n  (js/console.log \"Attempting to load:\" file-path)\n  (-> (js/fetch file-path)\n      (.then (fn [response]\n               (js/console.log \"Response status:\" (.-status response))\n               (if (.-ok response)\n                 (.text response)\n                 (throw (js/Error. (str \"Failed to load \" file-path \": \" (.-status response)))))))\n      (.then (fn [text]\n               (js/console.log \"Loaded text from\" file-path \":\" (subs text 0 100))\n               (callback (reader/read-string text))))\n      (.catch (fn [error]\n                (js/console.error \"Error loading\" file-path \":\" error)))))\n\n(defn load-data! []\n  (println \"Loading data...\")  ; Add this\n  (load-edn-file \"/data/match-data.edn\"\n                 #(do\n                    (println \"Match data loaded\")  ; Add this\n                    (swap! app-state assoc :match-data %)))\n  (load-edn-file \"/data/player-stats.edn\"\n                 #(do\n                    (println \"Player data loaded\")  ; Add this\n                    (swap! app-state assoc :player-data %))))\n\n;; Components\n(defn format-value [v]\n  (cond\n    (instance? js/Date v) (.toLocaleDateString v)\n    (number? v) (.toFixed v 2)  ; Format numbers to 2 decimal places\n    :else (str v)))\n\n(defn sort-by-key [data key-name ascending?]\n  (let [comparator (if ascending? compare (comp - compare))]\n    (sort-by #(get % key-name) comparator data)))\n\n(defn data-table [data]\n  (let [state (r/atom {:sort-key nil\n                       :ascending? true})]\n    (fn [data]\n      (if (and data (seq data))\n        [:table.data-table\n         [:thead\n          [:tr\n           (doall\n            (for [header (keys (first data))]\n              ^{:key header}\n              [:th.sortable\n               {:on-click #(swap! state (fn [s]\n                                          (if (= (:sort-key s) header)\n                                            (update s :ascending? not)\n                                            {:sort-key header\n                                             :ascending? true})))\n                :class (when (= header (:sort-key @state))\n                         (if (:ascending? @state) \"sort-asc\" \"sort-desc\"))}\n               (name header)]))]]\n         [:tbody\n          (doall\n           (let [sorted-data (if (:sort-key @state)\n                               (sort-by-key data (:sort-key @state) (:ascending? @state))\n                               data)]\n             (for [row sorted-data]\n               ^{:key (hash row)}\n               [:tr\n                (doall\n                 (for [header (keys (first data))]\n                   ^{:key (str (hash row) header)}\n                   [:td (format-value (get row header))]))])))]]\n        [:div \"No data available\"]))))\n\n(defn team-sheet []\n  [:div.section\n   [:h2 \"Team Sheet\"]\n   [:p \"Coming soon\"]])\n\n(defn match-data []\n  [:div.section\n   [:h2 \"Match Data\"]\n   (let [data (:match-data @app-state)]\n     (if (nil? data)\n       [:div \"Loading match data...\"]\n       [data-table data]))])\n\n(defn player-data []\n  [:div.section\n   [:h2 \"Player Data\"]\n   (let [data (:player-data @app-state)]\n     (if (nil? data)\n       [:div \"Loading player stats...\"]\n       [data-table data]))])\n\n(defn team-builder []\n  [:div.section\n   [:h2 \"Team Builder\"]\n   [:p \"Coming soon\"]])\n\n(defn nav-link [id label active-tab]\n  [:a.nav-link\n   {:href (str \"#\" id)\n    :class (when (= active-tab id) \"active\")\n    :on-click #(swap! app-state assoc :active-tab id)}\n   label])\n\n(defn navigation []\n  (let [active-tab (:active-tab @app-state)\n        menu-open? (:menu-open? @nav-state)]\n    [:nav.navbar\n     [:div.nav-brand\n      [:button.hamburger\n       {:on-click #(swap! nav-state update :menu-open? not)}\n       [:span.hamburger-box\n        [:span.hamburger-inner]]]]\n     [:div.nav-menu {:class (when menu-open? \"is-open\")}\n      [:div.nav-left\n       [nav-link \"team-sheet\" \"Team Sheet\" active-tab]\n       [nav-link \"match-data\" \"Match Data\" active-tab]\n       [nav-link \"player-data\" \"Player Data\" active-tab]\n       [nav-link \"team-builder\" \"Team Builder\" active-tab]]]]))\n\n(defn main-content []\n  (let [active-tab (:active-tab @app-state)]\n    [:div.content\n     (case active-tab\n       \"team-sheet\" [team-sheet]\n       \"match-data\" [match-data]\n       \"player-data\" [player-data]\n       \"team-builder\" [team-builder]\n       [team-sheet])]))\n\n(defn app []\n  [:div\n   [navigation]\n   [main-content]\n   [:footer.footer\n    \"Tom Brooksbank \u00a9 2024\"]])\n\n;; Initialize app\n(defn init! []\n  (load-data!)\n  (when-not @root-atom\n    (reset! root-atom (rdom/create-root (.getElementById js/document \"app\"))))\n  (rdom/render @root-atom [app]))\n\n;; Initialize once\n(defonce start\n  (init!))"]}